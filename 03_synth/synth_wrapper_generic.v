
// Generated by Cadence Genus(TM) Synthesis Solution GENUS15.20 - 15.20-p004_1
// Generated on: May 11 2025 06:45:39

// Verification Directory fv/synth_wrapper 

module full_adder(a, b, c_in, s_out, c_out);
  input a, b, c_in;
  output s_out, c_out;
  wire a, b, c_in;
  wire s_out, c_out;
  wire n_3, n_6, n_7;
  xor g1 (n_3, a, b);
  xor g2 (s_out, n_3, c_in);
  and g3 (n_6, a, b);
  and g5 (n_7, c_in, n_3);
  or g6 (c_out, n_6, n_7);
endmodule

module adder(a, b, c_in, s_out, c_out);
  input [3:0] a, b;
  input c_in;
  output [3:0] s_out;
  output c_out;
  wire [3:0] a, b;
  wire c_in;
  wire [3:0] s_out;
  wire c_out;
  wire \carry[0] , \carry[1] , \carry[2] ;
  full_adder fa0(.a (a[0]), .b (b[0]), .c_in (c_in), .s_out (s_out[0]),
       .c_out (\carry[0] ));
  full_adder \genblk1[1].fa (.a (a[1]), .b (b[1]), .c_in (\carry[0] ),
       .s_out (s_out[1]), .c_out (\carry[1] ));
  full_adder \genblk1[2].fa (.a (a[2]), .b (b[2]), .c_in (\carry[1] ),
       .s_out (s_out[2]), .c_out (\carry[2] ));
  full_adder \genblk1[3].fa (.a (a[3]), .b (b[3]), .c_in (\carry[2] ),
       .s_out (s_out[3]), .c_out (c_out));
endmodule

module and_gate(a, b, out);
  input [3:0] a, b;
  output [3:0] out;
  wire [3:0] a, b;
  wire [3:0] out;
  and g1 (out[0], a[0], b[0]);
  and g2 (out[1], a[1], b[1]);
  and g3 (out[2], a[2], b[2]);
  and g4 (out[3], a[3], b[3]);
endmodule

module lsl(a, b, out);
  input [3:0] a;
  input [1:0] b;
  output [3:0] out;
  wire [3:0] a;
  wire [1:0] b;
  wire [3:0] out;
  wire [3:0] stage1;
  wire n_22, n_31;
  CDN_bmux2 mux_out_13_14_g2(.sel0 (b[0]), .data0 (stage1[2]), .data1
       (stage1[1]), .z (out[2]));
  CDN_bmux2 mux_out_13_14_g3(.sel0 (b[0]), .data0 (stage1[1]), .data1
       (stage1[0]), .z (out[1]));
  CDN_bmux2 mux_stage1_10_14_g2(.sel0 (b[1]), .data0 (a[2]), .data1
       (stage1[0]), .z (stage1[2]));
  CDN_mux3 mux_out_13_14_g14(.sel0 (n_22), .data0 (a[3]), .sel1 (n_31),
       .data1 (stage1[1]), .sel2 (b[0]), .data2 (stage1[2]), .z
       (out[3]));
  nor g18 (n_22, b[1], b[0]);
  nor g22 (n_31, b[0], n_22);
  and g23 (stage1[0], a[0], wc);
  not gc (wc, b[1]);
  and g24 (stage1[1], a[1], wc0);
  not gc0 (wc0, b[1]);
  and g25 (out[0], stage1[0], wc1);
  not gc1 (wc1, b[0]);
endmodule

module lsr(a, b, result);
  input [3:0] a;
  input [1:0] b;
  output [3:0] result;
  wire [3:0] a;
  wire [1:0] b;
  wire [3:0] result;
  wire [3:0] stage1;
  wire n_20, n_29;
  CDN_bmux2 mux_result_14_14_g2(.sel0 (b[0]), .data0 (stage1[2]),
       .data1 (stage1[3]), .z (result[2]));
  CDN_bmux2 mux_result_14_14_g3(.sel0 (b[0]), .data0 (stage1[1]),
       .data1 (stage1[2]), .z (result[1]));
  CDN_bmux2 mux_stage1_11_14_g3(.sel0 (b[1]), .data0 (a[1]), .data1
       (a[3]), .z (stage1[1]));
  CDN_mux3 mux_result_14_14_g13(.sel0 (n_20), .data0 (a[0]), .sel1
       (n_29), .data1 (a[2]), .sel2 (b[0]), .data2 (stage1[1]), .z
       (result[0]));
  nor g17 (n_20, b[1], b[0]);
  nor g21 (n_29, b[0], n_20);
  and g22 (stage1[3], a[3], wc2);
  not gc2 (wc2, b[1]);
  and g23 (stage1[2], a[2], wc3);
  not gc3 (wc3, b[1]);
  and g24 (result[3], stage1[3], wc4);
  not gc4 (wc4, b[0]);
endmodule

module not_gate(a, out);
  input [3:0] a;
  output [3:0] out;
  wire [3:0] a;
  wire [3:0] out;
  not g1 (out[3], a[3]);
  not g2 (out[2], a[2]);
  not g3 (out[1], a[1]);
  not g4 (out[0], a[0]);
endmodule

module or_gate(a, b, out);
  input [3:0] a, b;
  output [3:0] out;
  wire [3:0] a, b;
  wire [3:0] out;
  or g1 (out[0], a[0], b[0]);
  or g2 (out[1], a[1], b[1]);
  or g3 (out[2], a[2], b[2]);
  or g4 (out[3], a[3], b[3]);
endmodule

module subtract(a, b, c_in, s_out, c_out);
  input [3:0] a, b;
  input c_in;
  output [3:0] s_out;
  output c_out;
  wire [3:0] a, b;
  wire c_in;
  wire [3:0] s_out;
  wire c_out;
  wire [3:0] b_neg;
  adder u_adder(.a (a), .b (b_neg), .c_in (c_in), .s_out (s_out),
       .c_out (c_out));
  not g1 (b_neg[3], b[3]);
  not g2 (b_neg[2], b[2]);
  not g3 (b_neg[1], b[1]);
  not g4 (b_neg[0], b[0]);
endmodule

module xor_gate(a, b, out);
  input [3:0] a, b;
  output [3:0] out;
  wire [3:0] a, b;
  wire [3:0] out;
  xor g1 (out[0], a[0], b[0]);
  xor g2 (out[1], a[1], b[1]);
  xor g3 (out[2], a[2], b[2]);
  xor g4 (out[3], a[3], b[3]);
endmodule

module synth_wrapper(clk, rst_n, a, b, op, result, carry);
  input clk, rst_n;
  input [3:0] a, b;
  input [2:0] op;
  output [3:0] result;
  output carry;
  wire clk, rst_n;
  wire [3:0] a, b;
  wire [2:0] op;
  wire [3:0] result;
  wire carry;
  wire [3:0] add_out;
  wire [3:0] lsl_out;
  wire [3:0] not_out;
  wire [3:0] or_out;
  wire [3:0] and_out;
  wire [3:0] xor_out;
  wire [3:0] lsr_out;
  wire [3:0] sub_out;
  wire add_carry, n_30, n_44, n_46, n_48, n_82, n_85, n_87;
  wire n_89, n_91, n_94, n_96, n_98, n_100, n_101, n_103;
  wire n_105, n_107, n_111, n_114, n_117, n_119, n_120, n_122;
  wire n_125, n_128, n_131, n_134, n_137, n_141, n_144, n_147;
  wire n_150, n_152, n_198, n_199, n_200, n_201, n_202, n_203;
  wire n_204, n_205, n_206, n_207, n_208, n_209, n_210, n_211;
  wire n_212, n_213, n_214, n_215, n_216, n_217, n_218, n_219;
  wire n_220, n_221, n_222, n_223, n_224, n_225, n_226, n_227;
  wire n_228, n_229, n_230, n_231, n_232, n_233, n_234, n_235;
  wire n_236, n_237, n_238, n_239, n_240, n_241, n_242, n_243;
  wire n_244, n_245, n_246, n_247, n_248, n_249, n_250, n_251;
  wire n_252, n_253, n_254, n_255, n_435, n_436, n_437, n_438;
  wire n_439, n_440, n_441, n_442, n_443, n_444, n_445, n_446;
  wire n_447, n_448, n_449, n_450, n_451, n_452, n_453, n_454;
  wire n_455, n_456, n_457, n_458, n_459, n_460, n_461, n_462;
  wire n_463, n_464, n_465, n_466, n_467, n_468, n_469, n_470;
  wire n_471, n_472, n_473, n_474, n_475, n_476, n_477, n_478;
  wire n_479, n_480, n_481, n_482, n_483, n_484, n_485, n_486;
  wire n_487, n_488, n_489, n_490, n_491, n_492, n_493, n_494;
  wire n_495, n_496, n_497, n_498, n_499, n_500, n_501, n_502;
  wire n_503, n_504, n_505, n_506, n_507, n_508, n_509, n_510;
  wire n_511, n_512, sub_carry;
  adder u_adder(.a (a), .b (b), .c_in (1'b0), .s_out (add_out), .c_out
       (add_carry));
  and_gate u_and(.a (a), .b (b), .out (and_out));
  lsl u_lsl(.a (a), .b (b[1:0]), .out (lsl_out));
  lsr u_lsr(.a (a), .b (b[1:0]), .result (lsr_out));
  not_gate u_not(.a (a), .out (not_out));
  or_gate u_or(.a (a), .b (b), .out (or_out));
  subtract u_subtract(.a (a), .b (b), .c_in (1'b1), .s_out (sub_out),
       .c_out (sub_carry));
  xor_gate u_xor(.a (a), .b (b), .out (xor_out));
  CDN_flop carry_reg_reg(.clk (clk), .d (n_48), .sena (1'b1), .aclr
       (n_30), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (carry));
  not g1 (n_30, rst_n);
  nor g100 (n_223, n_101, add_out[0]);
  nor g101 (n_222, n_44, lsl_out[0]);
  nor g102 (n_221, n_44, n_101);
  nor g104 (n_228, not_out[1], or_out[1]);
  nor g105 (n_227, n_87, not_out[1]);
  nor g106 (n_226, n_91, or_out[1]);
  nor g107 (n_225, n_87, n_91);
  nor g109 (n_232, and_out[1], xor_out[1]);
  nor g110 (n_231, n_94, and_out[1]);
  nor g111 (n_230, n_85, xor_out[1]);
  nor g112 (n_229, n_85, n_94);
  nor g114 (n_235, or_out[0], xor_out[0]);
  nor g115 (n_234, n_87, xor_out[0]);
  nor g116 (n_233, n_94, or_out[0]);
  nor g70 (n_201, not_out[3], xor_out[3]);
  nor g71 (n_200, n_91, xor_out[3]);
  nor g72 (n_199, n_94, not_out[3]);
  nor g73 (n_198, n_91, n_94);
  nor g75 (n_205, and_out[3], or_out[3]);
  nor g76 (n_204, n_87, and_out[3]);
  nor g77 (n_203, n_85, or_out[3]);
  nor g78 (n_202, n_87, n_85);
  nor g80 (n_209, lsr_out[1], add_out[1]);
  nor g81 (n_208, n_98, add_out[1]);
  nor g82 (n_207, n_44, lsr_out[1]);
  nor g83 (n_206, n_98, n_44);
  nor g85 (n_213, and_out[0], not_out[0]);
  nor g86 (n_212, n_91, and_out[0]);
  nor g87 (n_211, n_85, not_out[0]);
  nor g88 (n_210, n_91, n_85);
  nor g90 (n_216, and_out[2], not_out[2]);
  nor g91 (n_215, n_91, and_out[2]);
  nor g92 (n_214, n_85, not_out[2]);
  nor g94 (n_220, or_out[2], xor_out[2]);
  nor g95 (n_219, n_94, or_out[2]);
  nor g96 (n_218, n_87, xor_out[2]);
  nor g97 (n_217, n_87, n_94);
  nor g99 (n_224, lsl_out[0], add_out[0]);
  CDN_flop \result_reg_reg[0] (.clk (clk), .d (n_152), .sena (1'b1),
       .aclr (n_30), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (result[0]));
  CDN_flop \result_reg_reg[1] (.clk (clk), .d (n_137), .sena (1'b1),
       .aclr (n_30), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (result[1]));
  CDN_flop \result_reg_reg[2] (.clk (clk), .d (n_122), .sena (1'b1),
       .aclr (n_30), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (result[2]));
  CDN_flop \result_reg_reg[3] (.clk (clk), .d (n_107), .sena (1'b1),
       .aclr (n_30), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (result[3]));
  CDN_mux3 mux_carry_reg_76_5_g1(.sel0 (n_44), .data0 (add_carry),
       .sel1 (n_82), .data1 (sub_carry), .sel2 (n_46), .data2 (1'b0),
       .z (n_48));
  nor g277 (n_44, op[0], n_46);
  not g506 (n_435, op[0]);
  not g507 (n_436, op[1]);
  not g508 (n_437, op[2]);
  not g509 (n_438, sub_out[0]);
  not g510 (n_439, sub_out[1]);
  not g511 (n_440, sub_out[3]);
  not g512 (n_441, sub_out[2]);
  nor g513 (n_101, n_437, n_436, op[0]);
  not g514 (n_442, n_223);
  nand g515 (n_46, n_437, n_436);
  not g516 (n_443, n_222);
  not g517 (n_444, n_221);
  not g518 (n_445, n_228);
  nor g519 (n_87, op[2], n_436, n_435);
  not g520 (n_446, n_227);
  nor g521 (n_91, n_437, op[1], n_435);
  not g522 (n_447, n_226);
  not g523 (n_448, n_225);
  not g524 (n_449, n_232);
  nor g525 (n_94, n_437, op[1], op[0]);
  not g526 (n_450, n_231);
  nor g527 (n_85, op[2], n_436, op[0]);
  not g528 (n_451, n_230);
  not g529 (n_452, n_229);
  not g530 (n_453, n_235);
  not g531 (n_454, n_234);
  not g532 (n_455, n_233);
  not g533 (n_456, n_201);
  not g534 (n_457, n_200);
  not g535 (n_458, n_199);
  not g536 (n_459, n_198);
  not g537 (n_460, n_205);
  not g538 (n_461, n_204);
  not g539 (n_462, n_203);
  not g540 (n_463, n_202);
  not g541 (n_464, n_209);
  nor g542 (n_98, n_437, n_436, n_435);
  not g543 (n_465, n_208);
  not g544 (n_466, n_207);
  not g545 (n_467, n_206);
  not g546 (n_468, n_213);
  not g547 (n_469, n_212);
  not g548 (n_470, n_211);
  not g549 (n_471, n_210);
  not g550 (n_472, n_216);
  not g551 (n_473, n_215);
  not g552 (n_474, n_214);
  not g553 (n_475, n_220);
  not g554 (n_476, n_219);
  not g555 (n_477, n_218);
  not g556 (n_478, n_217);
  not g557 (n_479, n_224);
  nor g558 (n_82, n_46, n_435);
  not g559 (n_480, n_82);
  nand g560 (n_96, n_456, n_457, n_458, n_459);
  not g561 (n_481, n_96);
  nand g562 (n_89, n_460, n_461, n_462, n_463);
  not g563 (n_482, n_89);
  nand g564 (n_141, n_468, n_469, n_470, n_471);
  not g565 (n_483, n_141);
  nand g566 (n_111, n_471, n_472, n_473, n_474);
  not g567 (n_484, n_111);
  nand g568 (n_114, n_475, n_476, n_477, n_478);
  not g569 (n_485, n_114);
  nand g570 (n_125, n_445, n_446, n_447, n_448);
  not g571 (n_486, n_125);
  nand g572 (n_128, n_449, n_450, n_451, n_452);
  not g573 (n_487, n_128);
  nand g574 (n_144, n_453, n_454, n_455, n_478);
  not g575 (n_488, n_144);
  nor g576 (n_248, n_438, n_480);
  not g577 (n_489, n_248);
  nor g578 (n_249, n_439, n_480);
  not g579 (n_490, n_249);
  nor g580 (n_254, n_440, n_480);
  not g581 (n_491, n_254);
  nor g582 (n_255, n_441, n_480);
  not g583 (n_492, n_255);
  nand g584 (n_134, n_464, n_465, n_466, n_467);
  nand g585 (n_150, n_442, n_443, n_444, n_479);
  nor g586 (n_237, lsr_out[3], n_481, n_482);
  not g587 (n_493, n_237);
  nor g588 (n_236, n_98, n_481, n_482);
  not g589 (n_494, n_236);
  nor g590 (n_239, lsr_out[2], n_484, n_485);
  not g591 (n_495, n_239);
  nor g592 (n_238, n_98, n_484, n_485);
  not g593 (n_496, n_238);
  nor g594 (n_241, lsl_out[1], n_486, n_487);
  not g595 (n_497, n_241);
  nor g596 (n_240, n_101, n_486, n_487);
  not g597 (n_498, n_240);
  nor g598 (n_243, lsr_out[0], n_483, n_488);
  not g599 (n_499, n_243);
  nor g600 (n_242, n_98, n_483, n_488);
  not g601 (n_500, n_242);
  nand g602 (n_100, n_493, n_494);
  not g603 (n_501, n_100);
  nand g604 (n_117, n_495, n_496);
  not g605 (n_502, n_117);
  nand g606 (n_131, n_497, n_498);
  nand g607 (n_147, n_499, n_500);
  nand g608 (n_152, n_489, n_150, n_147);
  nand g609 (n_137, n_490, n_134, n_131);
  nor g610 (n_245, lsl_out[3], n_501);
  not g611 (n_503, n_245);
  nor g612 (n_244, n_101, n_501);
  not g613 (n_504, n_244);
  nor g614 (n_247, lsl_out[2], n_502);
  not g615 (n_505, n_247);
  nor g616 (n_246, n_101, n_502);
  not g617 (n_506, n_246);
  nand g618 (n_103, n_503, n_504);
  not g619 (n_507, n_103);
  nand g620 (n_119, n_505, n_506);
  not g621 (n_508, n_119);
  nor g622 (n_251, add_out[3], n_507);
  not g623 (n_509, n_251);
  nor g624 (n_250, n_44, n_507);
  not g625 (n_510, n_250);
  nor g626 (n_253, add_out[2], n_508);
  not g627 (n_511, n_253);
  nor g628 (n_252, n_44, n_508);
  not g629 (n_512, n_252);
  nand g630 (n_105, n_509, n_510);
  nand g631 (n_120, n_511, n_512);
  nand g632 (n_107, n_491, n_105);
  nand g633 (n_122, n_492, n_120);
endmodule

`ifdef RC_CDN_GENERIC_GATE
`else
module CDN_flop(clk, d, sena, aclr, apre, srl, srd, q);
  input clk, d, sena, aclr, apre, srl, srd;
  output q;
  wire clk, d, sena, aclr, apre, srl, srd;
  wire q;
  reg  qi;
  assign #1 q = qi;
  always 
    @(posedge clk or posedge apre or posedge aclr) 
      if (aclr) 
        qi <= 0;
      else if (apre) 
          qi <= 1;
        else if (srl) 
            qi <= srd;
          else begin
            if (sena) 
              qi <= d;
          end
  initial 
    qi <= 1'b0;
endmodule
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX // captures one-hot property of select inputs
module CDN_mux3(sel0, data0, sel1, data1, sel2, data2, z);
  input sel0, data0, sel1, data1, sel2, data2;
  output z;
  wire sel0, data0, sel1, data1, sel2, data2;
  reg  z;
  always 
    @(sel0 or sel1 or sel2 or data0 or data1 or data2) 
      case ({sel0, sel1, sel2})
       3'b100: z = data0;
       3'b010: z = data1;
       3'b001: z = data2;
       default: z = 1'bX;
      endcase
endmodule
`else
module CDN_mux3(sel0, data0, sel1, data1, sel2, data2, z);
  input sel0, data0, sel1, data1, sel2, data2;
  output z;
  wire sel0, data0, sel1, data1, sel2, data2;
  wire z;
  wire w_0, w_1, w_2;
  and a_0 (w_0, sel0, data0);
  and a_1 (w_1, sel1, data1);
  and a_2 (w_2, sel2, data2);
  or org (z, w_0, w_1, w_2);
endmodule
`endif // ONE_HOT_MUX
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  reg  z;
  always 
    @(sel0 or data0 or data1) 
      case ({sel0})
       1'b0: z = data0;
       1'b1: z = data1;
      endcase
endmodule
`else
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  wire z;
  wire inv_sel0, w_0, w_1;
  not i_0 (inv_sel0, sel0);
  and a_0 (w_0, inv_sel0, data0);
  and a_1 (w_1, sel0, data1);
  or org (z, w_0, w_1);
endmodule
`endif // ONE_HOT_MUX
`endif
